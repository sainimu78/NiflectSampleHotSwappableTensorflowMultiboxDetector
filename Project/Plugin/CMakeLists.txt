cmake_minimum_required(VERSION 3.10.0)

include(../InitRootPath.cmake)

set(c_ProjectName Plugin)

include(${c_RootCMakeProjectFrameworkDirPath}/ProjectBegin.cmake)
project(${c_ProjectName})
include(${c_RootCMakeProjectFrameworkDirPath}/ProjectEnd.cmake)

include(${c_RootCMakeProjectFrameworkDirPath}/InitCMakeTargetOutputDirPaths.cmake)

set(c_ProjectRequiredBinInstalling FALSE)

cpf_include(${c_RootProjectDirPath}/Runtime/Shared.cmake)
cpf_include_install(${c_RootProjectDirPath}/Plugin/Detector/Shared.cmake)

# set(ModuleName ${c_ProjectName})

# set(ModuleRootPath ${c_RootSourceDirPath}/${ModuleName})
# set(ModuleSourcePath ${ModuleRootPath}/src)
# set(ModuleIncludePath ${ModuleRootPath}/include)

# set(IncludePathsPrivate "")
# set(IncludePathsPublic "")
# list(APPEND IncludePathsPrivate ${ModuleSourcePath})
# list(APPEND IncludePathsPublic ${ModuleIncludePath})

# file(GLOB_RECURSE ModuleSources ${ModuleSourcePath}/*.cpp ${ModuleSourcePath}/*.h)
# create_source_group(${ModuleSourcePath} ${ModuleSources})
# file(GLOB_RECURSE ModuleHeaders ${ModuleIncludePath}/*.h)
# create_source_group(${ModuleIncludePath} ${ModuleHeaders})
# set(SrcAll "")
# list(APPEND SrcAll ${ModuleSources})
# list(APPEND SrcAll ${ModuleHeaders})

# add_executable(${ModuleName} ${SrcAll})

# target_include_directories(${ModuleName}
# 	PRIVATE ${IncludePathsPrivate}
# 	PUBLIC ${IncludePathsPublic}
# )

# ngt_target_link_libraries(${ModuleName} PRIVATE Runtime)

# list(APPEND v_ListModuleHeaderFilePath ${ModuleHeaders})
# include(${c_RootProjectDirPath}/Niflect/Default.cmake)

#include(${c_ProjectDirPath}/Install.cmake)

# set(StartupProjectName AntiCheat)
# if(MSVC)
#     set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${StartupProjectName})
# endif()

# if(MSVC)
# 	set_target_properties(${StartupProjectName} PROPERTIES
# 		VS_DEBUGGER_WORKING_DIRECTORY "$<IF:$<CONFIG:Debug>,${c_ProjectBinDirPathDebug},${c_ProjectBinDirPathRelease}>"
# 	)
# endif()

include(${c_RootCMakeProjectFrameworkDirPath}/Release.cmake)
include(${c_RootCMakeProjectFrameworkDirPath}/Cleanup.cmake)